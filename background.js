// Generated by CoffeeScript 1.6.3
(function() {
  var calculateLeftOffset, createDeviceWindow, devices, getDeviceInfo, openDevices, protocolVersion;

  protocolVersion = '1.0';

  devices = [
    {
      name: 'highend',
      metrics: {
        width: 320,
        height: 2000,
        fontScaleFactor: 1,
        fitWindow: false
      },
      ua: {
        userAgent: 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) \
                AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7'
      }
    }, {
      name: 'touch',
      metrics: {
        width: 320,
        height: 2000,
        fontScaleFactor: 1,
        fitWindow: false
      },
      ua: {
        userAgent: 'Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/12.0.024; \
                Profile/MIDP-2.1 Configuration/CLDC-1.1; en-us) AppleWebKit/525 \
                (KHTML, like Gecko) BrowserNG/7.1.12344'
      }
    }, {
      name: 'smart',
      metrics: {
        width: 240,
        height: 2000,
        fontScaleFactor: 1,
        fitWindow: false
      },
      ua: {
        userAgent: 'Mozilla/5.0 (SymbianOS/9.2; U; Series60/3.1 NokiaN95/10.0.010; \
                Profile/MIDP-2.0 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, \
                like Gecko) Safari/413 (383; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.507'
      }
    }, {
      name: 'feature',
      metrics: {
        width: 128,
        height: 2000,
        fontScaleFactor: 1,
        fitWindow: false
      },
      ua: {
        userAgent: 'Nokia1680c-2/2.0 (05.61) Profile/MIDP-2.1 Configuration/CLDC-1.1'
      }
    }
  ];

  localStorage['devices'] = JSON.stringify(devices);

  openDevices = [];

  getDeviceInfo = function(name) {
    var device, _i, _len;
    devices = JSON.parse(localStorage['devices']);
    for (_i = 0, _len = devices.length; _i < _len; _i++) {
      device = devices[_i];
      if (device.name === name) {
        return device;
      }
    }
  };

  calculateLeftOffset = function() {
    var device, left, _i, _len;
    left = 0;
    for (_i = 0, _len = openDevices.length; _i < _len; _i++) {
      device = openDevices[_i];
      left += device.metrics.width;
    }
    return left;
  };

  createDeviceWindow = function(params) {
    var cookie, device, leftOffset, reloaded, site, width, windowData;
    console.log('creating device');
    device = getDeviceInfo(params.device);
    site = params.site;
    leftOffset = calculateLeftOffset();
    width = device.metrics.width;
    reloaded = false;
    cookie = {
      url: 'http://m.globo.com/',
      name: 'devicegate.client'
    };
    windowData = {
      url: 'http://' + site + '/',
      type: 'popup',
      left: leftOffset + (20 * (openDevices.length + 1)),
      top: 0,
      width: device.metrics.width,
      height: device.metrics.height
    };
    return chrome.windows.create(windowData, function(crWindow) {
      var tab;
      tab = {
        tabId: crWindow.tabs[0].id
      };
      device.tab = tab;
      openDevices.push(device);
      return chrome.tabs.onUpdated.addListener(function(tabId, info) {
        if (tabId !== tab.tabId) {
          return;
        }
        if (info.status === "complete" && !reloaded) {
          console.log('Page load complete for tab ' + tab.tabId);
          return chrome.cookies.remove(cookie, function(response) {
            return chrome["debugger"].attach(tab, protocolVersion, function() {
              if (chrome.runtime.lastError) {
                console.log(chrome.runtime.lastError.message);
              }
              return chrome["debugger"].sendCommand(tab, "Network.enable", {}, function(response) {
                if (chrome.runtime.lastError) {
                  console.log(chrome.runtime.lastError.message);
                }
                return chrome["debugger"].sendCommand(tab, "Network.setUserAgentOverride", device.ua, function(response) {
                  if (chrome.runtime.lastError) {
                    console.log(chrome.runtime.lastError.message);
                  }
                  return chrome["debugger"].sendCommand(tab, "Page.setDeviceMetricsOverride", device.metrics, function(response) {
                    if (chrome.runtime.lastError) {
                      console.log(chrome.runtime.lastError.message);
                    }
                    return chrome["debugger"].sendCommand(tab, "Page.reload", {
                      ignoreCache: true
                    }, function() {
                      console.log('Reloading tab ' + tab.tabId);
                      return reloaded = true;
                    });
                  });
                });
              });
            });
          });
        }
      });
    });
  };

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.createWindow) {
      return createDeviceWindow(request.params);
    }
  });

}).call(this);
